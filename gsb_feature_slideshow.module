<?php

/**
 * @file
 *
 * Defines a custom fpp - gsb_slideshow_fpp.
 * 
 * Also defines a custom field - gsb_slideshow, and
 * custom widget gsb_slideshow_widget.
 *
 */
 
 // Create the custom fpp - gsb_slideshow_fpp
 
 /**
 * Implements hook_entity_info_alter().
 *
 * Here we tell Drupal about our custom fpp - 
 * 'gsb_slideshow_fpp'.
 * 
 */
 function gsb_feature_slideshow_entity_info_alter(&$entity_info) {

  $entity_info['fieldable_panels_pane']['bundles']['gsb_slideshow_fpp'] = array(
    'label' => t('Add slideshow'),
    'pane category' => t('GSB Slideshow FPP'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_text.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/gsb-slideshow-fpp',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

}

// Create field type - gsb_slideshow

/**
 * Implements hook_field_info().
 *
 * Here we tell Drupal about our custom field - 
 * its machine-readable name is 'gsb_slideshow'.
 * 
 */
function gsb_feature_slideshow_field_info() {
  return array(
    'gsb_slideshow' => array(
      'label' => t('GSB Slideshow'),
      'description' => t('The gsb slideshow field'),
      'default_widget' => 'gsb_slideshow_widget',
      'default_formatter' => 'gsb_slideshow_default_format',
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
        'default_image' => 1,
      ),
      'instance_settings' => array(
        'file_extensions' => 'jpg jpeg gif png',
        'file_directory' => 'general',
        'max_filesize' => '',
        'alt_field' => 0,
        'title_field' => 0,
        'max_resolution' => '',
        'min_resolution' => '',
      ),
    ),
  );
}

// Create the field widget - gsb_slideshow_widget

/**
 * Implements hook_field_widget_info().
 *
 * Here we tell Drupal about our custom widget - 
 * 'gsb_slideshow_widget'.
 * 
 */
function gsb_feature_slideshow_field_widget_info() {
  return array(
    'gsb_slideshow_widget' => array(
      'label' => t('Default Slideshow'),
      'field types' => array('gsb_slideshow'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );  
}

/**
 * Implements hook_field_widget_form().
 *
 * http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_widget_form/7
 * 
 * Here we define a form element that the user inputs data into. 
 * 
 */
function gsb_feature_slideshow_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if ($instance['widget']['type'] == 'gsb_slideshow_widget') {
   
    // Make it a multipart form  
    $form['#attributes']['enctype'] = 'multipart/form-data';

    // Define the element
    $element['title'] = array(
      '#title' => 'Title',
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['title']) ? $items[$delta]['title'] : NULL,
    );

    $element['link'] = array(
      '#title' => 'Link',
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['link']) ? $items[$delta]['link'] : NULL,
    );

    $element['fid'] = array(
      '#title' => 'Image',
      '#type' => 'managed_file',
      '#upload_location' => file_field_widget_uri($field, $instance),
      '#default_value' => isset($items[$delta]['fid']) ? $items[$delta]['fid'] : NULL,
    );

    $element['description'] = array(
      '#title' => 'Description',
      '#type' => 'textarea',
      '#rows' => '2',
      '#resizable' => FALSE,
      '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : NULL,
    );
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 *
 * gsb_feature_slideshow_field_is_empty() lets Drupal know whether or not to process input
 * at all; if the field is empty, it won't bother validating
 * or saving the values.
 *
 */
function gsb_feature_slideshow_field_is_empty($item, $field) {
  if (empty($item['title']) && empty($item['link']) && empty($item['description']) && empty($item['fid'])) {
    return TRUE;
  }
  return FALSE;
}

// Field Settings Form

/**
 * Implements hook_field_settings_form()
 *
 */
function gsb_feature_slideshow_field_settings_form($field, $instance, $has_data) {

  $form = array();
  
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $scheme_options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $stream_wrapper) {
    $scheme_options[$scheme] = $stream_wrapper['name'];
  }
  
  $form['uri_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Upload destination'),
    '#options' => $scheme_options,
    '#default_value' => $settings['uri_scheme'],
    '#description' => t('Select where the final files should be stored. Private file storage has significantly more overhead than public files, but allows restricted access to files within this field.'),
  );

  // When the user sets the scheme on the UI, even for the first time, it's
  // updating a field because fields are created on the "Manage fields"
  // page. So image_field_update_field() can handle this change.
  $form['default_image'] = array(
    '#title' => t('Default image'),
    '#type' => 'managed_file',
    '#description' => t('If no image is uploaded, this image will be shown on display.'),
    '#default_value' => $field['settings']['default_image'],
    '#upload_location' => $settings['uri_scheme'] . '://default_images/',
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form()
 */
function gsb_feature_slideshow_field_instance_settings_form($field, $instance) {
  $form = image_field_instance_settings_form($field, $instance);
  return $form;
}

// Formatter 

/**
 * Implementation of hook_field_formatter_info().
 *
 * Here we tell Drupal about our custom field formatter - 
 * 'gsb_slideshow_default_format'. 
 *
 */
function gsb_feature_slideshow_field_formatter_info() {
  return array(
    'gsb_slideshow_default_format' => array(
      'label' => t('Default'),
      'field types' => array('gsb_slideshow'),
      'settings' => array(       
        'image_style' => 'panopoly_image_spotlight', 
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_feature_slideshow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  $settings = $display['settings'];
  $formatter = $display['type'];
  
  drupal_add_library('system', 'ui.tabs');

  // Assemble the tabs header
  $header = '<ul>';
  foreach ($items as $delta => $item_data) {
    $header .= '<li>' . '<a href="#panopoly-spotlight-' . $delta . '">' . ($delta+1) . '</a></li>'; 
  }
  $header .= '</ul>';

  // Assemble the tabs content
  foreach ($items as $delta => $item_data) {
    $element[$delta]['#markup'] = ($delta == 0) ? 
      $header . 
      theme('gsb_slideshow_view', array('items' => $item_data, 'delta' => $delta, 'settings' => $settings)) : 
      theme('gsb_slideshow_view', array('items' => $item_data, 'delta' => $delta, 'settings' => $settings));
  }
  
  return $element;
}

// Formatter Settings Form

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_feature_slideshow_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  $element = array();

  if ($display['type'] == 'gsb_slideshow_default_format') {
    $element['image_style'] = array(
      '#title' => t('Image style'), 
      '#type' => 'select',
      '#options' => image_style_options(),
      '#default_value' => $settings['image_style'],
      '#required' => TRUE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_feature_slideshow_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  $summary = t('Image Style: @style', array('@style' => $settings['image_style']));
  
  return $summary;
}

// Field I/O

/**
 * Implements hook_field_presave()
 */
function gsb_feature_slideshow_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

  // We need to set presave values if fids are not set. This shouldn't effect save operations
  // form API validation will prevent this from ever happening unless previewing.
  
  if (!empty($items)) {
    foreach ($items as &$item) {
      if (empty($item['fid'])) {
        $fid = variable_get('panopoly_widgets_default_' . $entity->bundle . '_fid', NULL);
        if (!empty($fid)) {
          $item['fid'] = $fid;
        }
      }
    }

    image_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);
  }
  
}

/**
 * Implements hook_field_load().
 */
function gsb_feature_slideshow_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  image_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_insert().
 */
function gsb_feature_slideshow_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  image_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function gsb_feature_slideshow_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {

  // Load the original entity, if $entity->original is not already set.
  // This is done as per http://drupal.org/node/985642 and can be removed when that patch is committed. 
  
  if (empty($entity->original)) {
    $entity->original = entity_load_unchanged($entity_type, $field['id']);
  }

  image_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function gsb_feature_slideshow_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  image_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function gsb_feature_slideshow_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  image_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

// Views

/**
 * Implements hook_field_prepare_view().
 */
function gsb_feature_slideshow_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  
  // If there are no files specified at all, use the default.
  
  foreach ($entities as $id => $entity) {
    if (empty($items[$id]) && $field['settings']['default_image']) {
      if ($file = file_load($field['settings']['default_image'])) {
        $items[$id][0] = (array) $file + array(
          'is_default' => TRUE,
          'alt' => '',
          'title' => '',
        );
      }
    }
  }
  
}

/**
 * Theme function for table view
 */
function theme_gsb_slideshow_view($variables) {

  $title = $variables['items']['title'];
  $description = $variables['items']['description'];
  
  if (module_exists('uuid')) {
    $image_entity = entity_uuid_load('file', array($variables['items']['uuid']));
    $image = file_load(array_pop($image_entity)->fid);
  }
  else {
    $image = (object) $variables['items'];
  }
  
  $link = $variables['items']['link'];
  $settings = $variables['settings'];

  $output = '<div id="' . 'panopoly-spotlight-' . $variables['delta'] . '" class="' . 'panopoly-spotlight' . '">';
  $output .= theme('image_style', array('style_name' => $settings['image_style'], 'path' => $image->uri));
  $output .= '<div class="panopoly-spotlight-wrapper">';
  $output .= '<h3 class="panopoly-spotlight-label">' . t('Slideshow') . '</h3>';
  $output .= '<div class="panopoly-spotlight-info">';
  $output .= '<h2>' . l($title, $link) . '</h2>';
  $output .= '<p>' . $description . '</p>';
  $output .= '</div>';
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}
