<?php
/**
 * @file
 * Code for the GSB Feature Slideshow feature.
 */

include_once 'gsb_feature_slideshow.features.inc';

/**
 * @file
 *
 * Defines a custom fpp - gsb_slideshow_fpp.
 *
 * Also defines a custom field - gsb_slideshow, and
 * custom widget gsb_slideshow_widget.
 *
 */

/**
 * Implements hook_init()
 *
 * Here we tell Drupal about our javascript file
 *
 */
function gsb_feature_slideshow_init() {

  // Include the Slideshow Rotation time setting

  $rotation_time = 1000 * variable_get('panopoly_widgets_spotlight_rotation_time', 4);
  $js_variables = array('gsb_slideshow_settings' => array('rotation_time' => $rotation_time));

  drupal_add_js($js_variables, 'setting');

  // Add our custom javascript to the footer to override other things.
  drupal_add_js(drupal_get_path('module', 'gsb_feature_slideshow') . '/gsb_feature_slideshow.js', array('scope' => 'footer'));
}

 // Create the custom fpp - gsb_slideshow_fpp

 /**
 * Implements hook_entity_info_alter().
 *
 * Here we tell Drupal about our custom fpp -
 * 'gsb_slideshow_fpp'.
 *
 */
 function gsb_feature_slideshow_entity_info_alter(&$entity_info) {

  // create the GSB Slideshow FPP

  $entity_info['fieldable_panels_pane']['bundles']['gsb_slideshow_fpp'] = array(
    'label' => t('Add GSB slideshow'),
    'pane category' => t('GSB Slideshow FPP'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_text.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/gsb-slideshow-fpp',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // create the slide show view mode

  $entity_info['file']['view modes']['gsb_slideshow'] = array(
    'label' => t('GSB Slideshow'),
    'custom settings' => TRUE,
  );

}

// Create field type - gsb_slideshow

/**
 * Implements hook_field_info().
 *
 * Here we tell Drupal about our custom field -
 * its machine-readable name is 'gsb_slideshow'.
 *
 */
function gsb_feature_slideshow_field_info() {
  return array(
    'gsb_slideshow' => array(
      'label' => t('GSB Slideshow'),
      'description' => t('The gsb slideshow field'),
      'default_widget' => 'gsb_slideshow_widget',
      'default_formatter' => 'gsb_slideshow_default_format',
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
        'default_image' => 1,
      ),
      'instance_settings' => array(
        'file_extensions' => 'jpg jpeg gif png',
        'file_directory' => 'general',
        'max_filesize' => '',
        'alt_field' => 0,
        'title_field' => 0,
        'max_resolution' => '',
        'min_resolution' => '',
      ),
    ),
  );
}

// Create the field widget - gsb_slideshow_widget

/**
 * Implements hook_field_widget_info().
 *
 * Here we tell Drupal about our custom widget -
 * 'gsb_slideshow_widget'.
 *
 */
function gsb_feature_slideshow_field_widget_info() {
  return array(
    'gsb_slideshow_widget' => array(
      'label' => t('Default Slideshow'),
      'field types' => array('gsb_slideshow'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_widget_form/7
 *
 * Here we define a form element that the user inputs data into.
 *
 */
function gsb_feature_slideshow_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if ($instance['widget']['type'] == 'gsb_slideshow_widget') {

    // Make it a multipart form
    $form['#attributes']['enctype'] = 'multipart/form-data';

    // Define the element
    $element['title'] = array(
      '#title' => 'Title',
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['title']) ? $items[$delta]['title'] : NULL,
      '#element_validate' => array('gsb_feature_slideshow_pane_validate'),
    );

    $element['link'] = array(
      '#title' => 'Link',
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['link']) ? $items[$delta]['link'] : NULL,
    );

    $element['fid'] = array(
      '#title' => 'Image or Video',
      '#type' => 'media',
      '#collapsed' => TRUE,
      '#upload_location' => file_field_widget_uri($field, $instance),
      '#description' => '',
      '#media_options' => array(
        'global' => array(
          'types' => array(
            'image',
            'video'
          ),
          'enabledPlugins' => array(
            'gsb_media_center_image',
            'gsb_media_center_video'
          ),
        ),
      )
    ); 
    
    if (isset($items[$delta]) && isset($items[$delta]['fid']) && !is_array($items[$delta]['fid'])) {
      $element['fid']['#default_value'] = array('fid' => $items[$delta]['fid']);
    } else {
      $element['fid']['#default_value'] = null;
    }    

    $element['description'] = array(
      '#title' => 'Description',
      '#type' => 'textarea',
      '#rows' => '2',
      '#maxlength' => '300',
      '#description' => t('Limited to 300 characters'),
      '#resizable' => FALSE,
      '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : NULL,
    );

    $element['button_text'] = array(
      '#title' => 'Button Text',
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['button_text']) ? $items[$delta]['button_text'] : NULL,
    );

    $options = drupal_map_assoc(array("style-1", "style-2", "style-3"));
    $element['button_style'] = array(
      '#title' => 'Button Style',
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => isset($items[$delta]['button_style']) ? $items[$delta]['button_style'] : NULL,
    );

    $field_parents = $element['#field_parents'];
    $field_name = $element['#field_name'];
    $language = $element['#language'];

    // Nest the field collection item entity form in a dedicated parent space,
    // by appending [field_name, langcode, delta] to the current parent space.
    // That way the form values of the field collection item are separated.
    $parents = array_merge($field_parents, array($field_name, $language, $delta));

    $element['remove_button'] = array(
      '#delta' => $delta,
      '#name' => implode('_', $parents) . '_remove_button',
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#validate' => array(),
      '#submit' => array('gsb_feature_slideshow_remove_submit'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'path' => 'field_collection/ajax',
        'effect' => 'fade',
      ),
      '#weight' => 1000,
    );

  }

  return $element;
}

/**
 * Validate the widget form for the slideshow fpp
 */
function gsb_feature_slideshow_pane_validate($form, &$form_state) {

  $name = $form['#name'];

  $element = explode('][', $name);

  $index = $element[1];

  $title = $form_state['values']['field_gsb_slideshow']['und'][$index]['title'];
  $description = $form_state['values']['field_gsb_slideshow']['und'][$index]['description'];

  // if we have a image
  if (isset($form_state['values']['field_gsb_slideshow']['und'][$index]) &&
      is_array($form_state['values']['field_gsb_slideshow']['und'][$index]['fid']) &&
      $form_state['values']['field_gsb_slideshow']['und'][$index]['fid']['fid'] != '0' ) {

    // we need at least a title
    if (empty($title)) {
      form_set_error('field_gsb_slideshow][und][' . $index . '][title', t('You need to enter a title'));
    }

  } /* else {

    // if we don't have an image, we need at least a title and description

    if (empty($title)) {
      form_set_error('field_gsb_slideshow][und][' . $index . '][title', t('You need to enter a title'));
    }

    if (empty($description)) {
      form_set_error('field_gsb_slideshow][und][' . $index . '][description', t('You need to enter a description'));
    }

  } */

}

/**
 *
 * This code was copied over from:
 * modules/contrib/field_collection/field_collection.module
 *
 * Submit callback to remove an item from the field UI multiple wrapper.
 *
 * When a remove button is submitted, we need to find the item that it
 * referenced and delete it. Since field UI has the deltas as a straight
 * unbroken array key, we have to renumber everything down. Since we do this
 * we *also* need to move all the deltas around in the $form_state['values']
 * and $form_state['input'] so that user changed values follow. This is a bit
 * of a complicated process.
 *
 */
function gsb_feature_slideshow_remove_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $delta = $button['#delta'];

  // Where in the form we'll find the parent element.
  $address = array_slice($button['#array_parents'], 0, -2);

  // Go one level up in the form, to the widgets container.
  $parent_element = drupal_array_get_nested_value($form, $address);
  $field_name = $parent_element['#field_name'];
  $langcode = $parent_element['#language'];
  $parents = $parent_element['#field_parents'];

  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

  // Go ahead and renumber everything from our delta to the last
  // item down one. This will overwrite the item being removed.
  for ($i = $delta; $i <= $field_state['items_count']; $i++) {
    $old_element_address = array_merge($address, array($i + 1));
    $new_element_address = array_merge($address, array($i));

    $moving_element = drupal_array_get_nested_value($form, $old_element_address);
    $moving_element_value = drupal_array_get_nested_value($form_state['values'], $old_element_address);
    $moving_element_input = drupal_array_get_nested_value($form_state['input'], $old_element_address);

    // Tell the element where it's being moved to.
    $moving_element['#parents'] = $new_element_address;

    // Move the element around.
    form_set_value($moving_element, $moving_element_value, $form_state);
    drupal_array_set_nested_value($form_state['input'], $moving_element['#parents'], $moving_element_input);

    // Move the entity in our saved state.
    if (isset($field_state['entity'][$i + 1])) {
      $field_state['entity'][$i] = $field_state['entity'][$i + 1];
    }
    else {
      unset($field_state['entity'][$i]);
    }
  }

  // I've needed to adjust the following code from what was originally being done
  // in the field_collection module, as the items are not part of a field collection.
  
  // begin of change

  // from this...

  // Replace the deleted entity with an empty one. This helps to ensure that
  // trying to add a new entity won't ressurect a deleted entity from the
  // trash bin.
  //$count = count($field_state['entity']);
  //$field_state['entity'][$count] = entity_create('field_collection_item', array('field_name' => $field_name));

  // to this...

  // We clear the first entity if there are no more items to delete to
  // avoid the ressurection issue described above.

  if ($field_state['items_count'] == 0) {
    $entity = $form_state['entity'];
    $entity->field_gsb_slideshow[$langcode][0]['title'] = "";
    $entity->field_gsb_slideshow[$langcode][0]['description'] = "";
    $entity->field_gsb_slideshow[$langcode][0]['link'] = "";
    $entity->field_gsb_slideshow[$langcode][0]['button_text'] = "";
    $entity->field_gsb_slideshow[$langcode][0]['button_style'] = "style 1";
    $entity->field_gsb_slideshow[$langcode][0]['fid'] = null;
  }

  // end of change

  // Then remove the last item. But we must not go negative.
  if ($field_state['items_count'] > 0) {
    $field_state['items_count']--;
  }

  // Fix the weights. Field UI lets the weights be in a range of
  // (-1 * item_count) to (item_count). This means that when we remove one,
  // the range shrinks; weights outside of that range then get set to
  // the first item in the select by the browser, floating them to the top.
  // We use a brute force method because we lost weights on both ends
  // and if the user has moved things around, we have to cascade because
  // if I have items weight weights 3 and 4, and I change 4 to 3 but leave
  // the 3, the order of the two 3s now is undefined and may not match what
  // the user had selected.
  $input = drupal_array_get_nested_value($form_state['input'], $address);
  // Sort by weight
  uasort($input, '_field_sort_items_helper');

  // Reweight everything in the correct order.
  $weight = -1 * $field_state['items_count'];
  foreach ($input as $key => $item) {
    if ($item) {
      $input[$key]['_weight'] = $weight++;
    }
  }

  drupal_array_set_nested_value($form_state['input'], $address, $input);
  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_field_is_empty().
 *
 * gsb_feature_slideshow_field_is_empty() lets Drupal know whether or not to process input
 * at all; if the field is empty, it won't bother validating
 * or saving the values.
 *
 */
function gsb_feature_slideshow_field_is_empty($item, $field) {
  if (empty($item['title'])) {
    //if (!empty($item['fid'])) {
      //drupal_set_message(t('Please add a title for the slide'), 'status', FALSE);
    //}
    return TRUE;
  }
  return FALSE;
}

// Field Settings Form

/**
 * Implements hook_field_settings_form()
 *
 */
function gsb_feature_slideshow_field_settings_form($field, $instance, $has_data) {

  if ($instance['widget']['type'] == 'gsb_slideshow_widget') {

    $form = array();

    $defaults = field_info_field_settings($field['type']);
    $settings = array_merge($defaults, $field['settings']);

    $scheme_options = array();
    foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $stream_wrapper) {
      $scheme_options[$scheme] = $stream_wrapper['name'];
    }

    $form['uri_scheme'] = array(
      '#type' => 'radios',
      '#title' => t('Upload destination'),
      '#options' => $scheme_options,
      '#default_value' => $settings['uri_scheme'],
      '#description' => t('Select where the final files should be stored. Private file storage has significantly more overhead than public files, but allows restricted access to files within this field.'),
    );

    // When the user sets the scheme on the UI, even for the first time, it's
    // updating a field because fields are created on the "Manage fields"
    // page. So image_field_update_field() can handle this change.
    $form['default_image'] = array(
      '#title' => t('Default image'),
      '#type' => 'managed_file',
      '#description' => t('If no image is uploaded, this image will be shown on display.'),
      '#default_value' => $field['settings']['default_image'],
      '#upload_location' => $settings['uri_scheme'] . '://default_images/',
    );

    return $form;

  }

} 

/**
 * Implements hook_field_instance_settings_form()
 */
function gsb_feature_slideshow_field_instance_settings_form($field, $instance) {
  $form = image_field_instance_settings_form($field, $instance);
  return $form;
}

// Formatter

/**
 * Implementation of hook_field_formatter_info().
 *
 * Here we tell Drupal about our custom field formatter -
 * 'gsb_slideshow_default_format'.
 *
 */
function gsb_feature_slideshow_field_formatter_info() {
  return array(
    'gsb_slideshow_default_format' => array(
      'label' => t('Default'),
      'field types' => array('gsb_slideshow'),
      'settings' => array('file_view_mode' => 'default'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_feature_slideshow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  $settings = $display['settings'];
  $formatter = $display['type'];

  drupal_add_library('system', 'ui.tabs');

  // Assemble the tabs header
  $header = '<ul>';
  foreach ($items as $delta => $item_data) {
    $header .= '<li>' . '<a href="#panopoly-spotlight-' . $delta . '">' . ($delta+1) . '</a></li>';
  }
  $header .= '</ul>';

  // Assemble the tabs content
  foreach ($items as $delta => $item_data) {
    $element[$delta]['#markup'] = ($delta == 0) ?
      $header .
      theme('gsb_slideshow_view', array('items' => $item_data, 'delta' => $delta, 'settings' => $settings)) :
      theme('gsb_slideshow_view', array('items' => $item_data, 'delta' => $delta, 'settings' => $settings));
  }

  return $element;
}

// Formatter Settings Form

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_feature_slideshow_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'gsb_slideshow_default_format') {
    $element['file_view_mode'] = array(
      '#title'   => t('View mode'),
      '#type'    => 'select',
      '#options' => file_entity_view_mode_labels(),
      '#default_value' => $settings['file_view_mode'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_feature_slideshow_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = t('View Mode: @viewmode', array('@viewmode' => $settings['file_view_mode']));

  return $summary;
}

// Field I/O

/**
 * Implements hook_field_presave()
 */
function gsb_feature_slideshow_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

  // We need to set presave values if fids are not set. This shouldn't effect save operations
  // form API validation will prevent this from ever happening unless previewing.

  if (!empty($items)) {
    foreach ($items as &$item) {
      if (empty($item['fid'])) {
        $fid = variable_get('panopoly_widgets_default_' . $entity->bundle . '_fid', NULL);
        if (!empty($fid)) {
          $item['fid'] = $fid;
        }
      }
    }

    if (isset($items['fid']) && $items['fid'] != 0) {
      image_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);
    }

  }

}

/**
 * Implements hook_field_load().
 */
function gsb_feature_slideshow_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  image_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_insert().
 */
function gsb_feature_slideshow_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  image_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function gsb_feature_slideshow_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {

  // Load the original entity, if $entity->original is not already set.
  // This is done as per http://drupal.org/node/985642 and can be removed when that patch is committed.

  if (empty($entity->original)) {
    $entity->original = entity_load_unchanged($entity_type, $field['id']);
  }

  image_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function gsb_feature_slideshow_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  image_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function gsb_feature_slideshow_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  image_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

// Views

/**
 * Implements hook_field_prepare_view().
 */
function gsb_feature_slideshow_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {

  // If there are no files specified at all, use the default.

  foreach ($entities as $id => $entity) {
    if (empty($items[$id]) && $field['settings']['default_image']) {
      if ($file = file_load($field['settings']['default_image'])) {
        $items[$id][0] = (array) $file + array(
          'is_default' => TRUE,
          'alt' => '',
          'title' => '',
        );
      }
    }
  }

}

// Theme hookup and markup

/**
 * Implements hook_theme().
 */
function gsb_feature_slideshow_theme($existing, $type, $theme, $path) {
  return array(
    'gsb_slideshow_view' => array(
      'variables' => array(
        'items' => NULL,
        'delta' => NULL,
        'settings' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for table view
 */
function theme_gsb_slideshow_view($variables) {

  if ($variables['items'] == null) {
    return;
  }
  
  $title = $variables['items']['title'];
  $description = $variables['items']['description'];
  $button_text = $variables['items']['button_text'];
  $button_style = $variables['items']['button_style'];

  if (module_exists('uuid')) {
    $image_entity = entity_uuid_load('file', array($variables['items']['uuid']));
    $image = file_load(array_pop($image_entity)->fid);
  }
  else {
    $image = (object) $variables['items'];
  }

  $link = $variables['items']['link'];
  $settings = $variables['settings'];

  if (!empty($variables['items']['fid'])) {

    $image = file_view((object) $variables['items'], $variables['settings']['file_view_mode']);

    if ($variables['items']['type'] == 'image') {

      // Render the image

      $output = render($image);

    }
    elseif ($variables['items']['type'] == 'video') {

      // Get the video path.

      $video_path = drupal_realpath($variables['items']['uri']);

      // If it's a youtube video we need to use the embed url.

      if ($variables['items']['filemime'] == 'video/youtube') {
        $video_parts = drupal_parse_url($video_path);
        if (stristr($video_parts['path'], 'watch')) {
          $video_path = str_replace('watch', 'embed', $video_parts['path']) . "/" . $video_parts['query']['v'];
        }
        $video_path .= '?autoplay=1';
      }

      // Create the image.

      $img_tag = theme_image_style(array(
        'style_name' => $image['file']['#style_name'],
        'path' => $image['file']['#path'],
        'alt' => $variables['items']['filename'],
        'width' => NULL,
        'height' => NULL
      ));

      // Print a link wrapper so that it can open in a modal.

      $output = '<div class="field field-type-image field-name-field-gsb-spotlight-media">';
      $output .=  l($img_tag, $video_path, array('attributes' => array('class' => 'fancybox fancybox.iframe'), 'html' => TRUE));
      $output .=  '<span class="video-play-icon"></span></div>';

    }

  }

  $class = 'panopoly-spotlight-wrapper ' . $button_style;
  $class .= (empty($variables['item']['fid'])) ? " no-image" : "";
  $output .= '<div class="' . $class . '">';

  $output .= '<div class="panopoly-spotlight-info">';
  $output .= '<h2>';

  if (!empty($link)) {
    $output .= '<a href="' . $link . '">';
  }

  if (!empty($title)) {
    $output .= $title;
  }
  $output .= '<i></i>';

  if (!empty($link)) {
    $output .= '</a>';
  }

  $output .= '</h2>';
  
  $output .= '<p>' . $description . '</p>';

  if (!empty($link) && !empty($button_text)) {
    $output .= '<a href="' . $link . '" class="slider-btn ' . $button_style . '">' . $button_text . '</a>';
  }

  $output .= '</div>';
  $output .= '</div>';  

  return $output;
}
